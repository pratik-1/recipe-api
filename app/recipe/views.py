"""View for recipe APIs.
"""
from drf_spectacular.utils import (
    extend_schema,
    extend_schema_view,
    OpenApiParameter,
    OpenApiTypes,
)
from rest_framework import viewsets, mixins, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated

from core.models import Recipe, Tag, Ingredient
from . import serializers


# extend_schema_view to extend schema generated by drf-spectacular
@extend_schema_view(
    # extend for list endpoint
    list=extend_schema(
        parameters=[
            # OpenApiParameter to provide details of the params acceptable
            # to API request
            OpenApiParameter(
                "tags",
                OpenApiTypes.STR,
                description="Comma separated list of tag IDs to filter",
            ),
            OpenApiParameter(
                "ingredients",
                OpenApiTypes.STR,
                description="Comma separated list of ingredient IDs to filter",
            ),
        ]
    )
)
class RecipeViewSet(viewsets.ModelViewSet):
    """View from manage recipe APIs"""

    # All request methods requires 'RecipeDetailSerializer' except list
    serializer_class = serializers.RecipeDetailSerializer
    queryset = Recipe.objects.all()
    authentication_classes = [TokenAuthentication]  # allow log-in by token
    permission_classes = [IsAuthenticated]  # checks if logged-in

    def _params_to_ints(self, qs):
        """Convert list of strings to integers."""
        return [int(str_id) for str_id in qs.split(",")]

    def get_queryset(self):
        """Retrieve only recipes for authenticated user."""
        tags = self.request.query_params.get("tags")
        ingredients = self.request.query_params.get("ingredients")
        queryset = self.queryset
        # check if tags are passed, if true filter on tags
        if tags:
            tag_ids = self._params_to_ints(tags)
            queryset = queryset.filter(tags__id__in=tag_ids)

        # check if ingredients are passed, if true filter on ingredients
        if ingredients:
            ingredient_ids = self._params_to_ints(ingredients)
            queryset = queryset.filter(ingredients__id__in=ingredient_ids)

        return queryset.filter(
            user=self.request.user).order_by("-id").distinct()

    # Set serializer_class depending on request
    # https://www.django-rest-framework.org/api-guide/generic-views/#get_serializer_classself # noqa
    def get_serializer_class(self):
        if self.action == "list":
            return serializers.RecipeSerializer
        elif self.action == "upload_image":
            # here action is custom action
            return serializers.RecipeImageSerializer
        return self.serializer_class

    # overrides object creation to save model in viewset
    # https://www.django-rest-framework.org/api-guide/generic-views/#get_serializer_classself # noqa
    def perform_create(self, serializer):
        """Create a new recipe."""
        # On authenticated user save new object after validating data
        serializer.save(user=self.request.user)

    @action(methods=["POST"], detail=True, url_path="upload-image")
    # custom accepts only post and only of detail type.
    def upload_image(self, request, pk=None):
        recipe = self.get_object()
        serializer = self.get_serializer(recipe, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@extend_schema_view(
    list=extend_schema(
        parameters=[
            OpenApiParameter(
                "assigned_only",
                OpenApiTypes.INT,
                enum=[0, 1],
                description="Filter by items assigned to recipes.",
            ),
        ]
    )
)
class BaseRecipeAttrViewSet(
    mixins.DestroyModelMixin,
    mixins.UpdateModelMixin,
    mixins.ListModelMixin,
    viewsets.GenericViewSet,
):
    # Important: mixins should be imported before GenericViewSet
    authentication_classes = [TokenAuthentication]  # allow log-in by token
    permission_classes = [IsAuthenticated]  # checks if logged-in

    def get_queryset(self):
        """Retrieve only tags for authenticated user."""
        # parse assigned_only to bool depending on presence
        assigned_only = bool(
            int(self.request.query_params.get("assigned_only", 0)))
        queryset = self.queryset
        if assigned_only:
            # filter values that has recipe assigned
            queryset = queryset.filter(recipe__isnull=False)

        return (
            queryset.filter(user=self.request.user).order_by("name").distinct()
        )  # distinct for unique values only


class TagViewSet(BaseRecipeAttrViewSet):
    """Manage tags in database."""

    serializer_class = serializers.TagSerializer
    queryset = Tag.objects.all()


class IngredientViewSet(BaseRecipeAttrViewSet):
    """Manage ingredients in database."""

    serializer_class = serializers.IngredientSerializer
    queryset = Ingredient.objects.all()
